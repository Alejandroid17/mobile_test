{"version":3,"sources":["components/ItemRow.js","components/List.js","components/LoadingPanel.js","components/Error500.js","components/LoadUserList.js","components/Error404.js","components/UserCard.js","components/ItemList.js","components/UserInfo.js","components/UserPanel.js","components/LoadUserInfo.js","App.js","serviceWorker.js","index.js"],"names":["ItemRow","react_default","a","createElement","reactstrap_es","className","Link","to","this","props","item","id","style","width","type","name","React","Component","List","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearch","inputType","event","input","target","value","length","minLengthSearch","rowsFiltered","filterData","hasNextPage","setState","numFilteredRows","currentPage","hasPreviousPage","state","elements","filter","row","inputLower","toLowerCase","includes","rowsPerPage","handleChangePage","renderList","items","initValue","finishValue","itemList","slice","map","ItemRow_ItemRow","key","data","_this2","xs","sm","title","placeholder","onChange","color","onClick","disabled","block","LoadingPanel","override","css","_templateObject","height","marginTop","react_spinners","sizeUnit","size","Error500","LoadUserList","readData","dataURL","fetch","then","res","json","result","Brastlewark","loaded","catch","error","hasError","component","LoadingPanel_LoadingPanel","Error500_Error500","List_List","Error404","UserCard","user","userData","src","thumbnail","alt","ItemList","list","emptyMessage","index","UserInfo","age","hairColor","weight","UserPanel","UserCard_UserCard","UserInfo_UserInfo","hair_color","ItemList_ItemList","friends","professions","LoadUserInfo","UserPanel_UserPanel","App","BrowserRouter","Switch","Route","exact","path","render","LoadUserList_LoadUserList","_ref","match","LoadUserInfo_LoadUserInfo","params","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.651a0b5d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Row} from 'reactstrap';\nimport {Link} from 'react-router-dom'\n\n\nexport default class ItemRow extends React.Component {\n\n    render() {\n        return (\n            <Row className=\"mb-2 shadow rounded\">\n                <Link to={'/user/' + this.props.item.id} style={{width: '100%'}}>\n                    <button type=\"button\" className=\"btn btn-light w-100\">\n                        <h3 className=\"m-2 font-weight-bold text-truncate\">\n                            {this.props.item.name}\n                        </h3>\n                    </button>\n                </Link>\n            </Row>\n        );\n    }\n};\n\nItemRow.propTypes = {\n    item: PropTypes.shape({                 // item => Dictionary of ...\n        id: PropTypes.number.isRequired,    // id => Number (required)\n        name: PropTypes.string,             // name => String\n    })\n};\n","import React from 'react';\nimport {Container, Row, Col, Button, Input} from 'reactstrap';\nimport ItemRow from './ItemRow'\nimport PropTypes from \"prop-types\";\n\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            elements: props.data,\n            rowsFiltered: props.data,\n            numFilteredRows: 0,\n            currentPage: 0,\n            hasPreviousPage: false,\n            hasNextPage: this.hasNextPage(0, props.data),\n        };\n    };\n\n    /**\n     * On `change` event, the rows are filtered and the status is updated.\n     * @param inputType: type of input.\n     * @param event: event launched.\n     */\n    handleSearch = inputType => event => {\n        let input = event.target.value;\n        if (input.length >= this.props.minLengthSearch) {\n            let rowsFiltered = this.filterData(input);\n            let hasNextPage = this.hasNextPage(0, rowsFiltered);\n            this.setState({\n                numFilteredRows: rowsFiltered.length,\n                rowsFiltered: rowsFiltered,\n                currentPage: 0,\n                hasPreviousPage: false,\n                hasNextPage: hasNextPage,\n            })\n        } else {\n            this.setState({\n                numFilteredRows: this.state.elements.length,\n                rowsFiltered: this.state.elements,\n                hasPreviousPage: false,\n                hasNextPage: this.hasNextPage(0, this.state.elements),\n            });\n        }\n    };\n\n    /**\n     * Filters the rows by item value.\n     * @param input: string by which to filter the search.\n     * @returns {*[]}: list of rows filtered.\n     */\n    filterData = (input) => {\n        let rowsFiltered = this.state.elements.filter((row) => {\n            let inputLower = input.toLowerCase();\n            if (row.name.toLowerCase().includes(inputLower)) {\n                return true;\n            }\n            return null;\n        });\n        return rowsFiltered;\n    };\n\n    /**\n     * Determines if the pagination has next page.\n     * @param currentPage: number of the current page.\n     * @param elements: list of total elements.\n     * @returns {boolean}: true if has next page, in another case false.\n     */\n    hasNextPage = (currentPage, elements) => {\n        if (elements.length > this.props.rowsPerPage) {\n            return currentPage * this.props.rowsPerPage + this.props.rowsPerPage < elements.length;\n        }\n        return false;\n    };\n\n    /**\n     * Determines if the pagination has previous page.\n     * @param currentPage: number of the current page.\n     * @returns {boolean}: true if has next page, in another case false.\n     */\n    hasPreviousPage = (currentPage) => {\n        return currentPage > 0;\n    };\n\n    /**\n     * Change the current page.\n     * @param event: event type (next or previus) to indicate if the page is changed to the next\n     *               or previous one .\n     */\n    handleChangePage = (event) => {\n        let currentPage = this.state.currentPage;\n        let elements = this.state.rowsFiltered;\n        if (event === \"next\" && this.hasNextPage(currentPage, elements)) currentPage++;\n        if (event === \"previous\" && this.hasPreviousPage(currentPage)) currentPage--;\n        this.setState({\n            currentPage: currentPage,\n            hasPreviousPage: this.hasPreviousPage(currentPage),\n            hasNextPage: this.hasNextPage(currentPage, elements),\n        });\n    };\n\n    /**\n     * Render the list of items.\n     * @param items: List of items.\n     * @returns {*}: List of `ItemRow`components.\n     */\n    renderList = (items) => {\n        let initValue = this.state.currentPage * this.props.rowsPerPage;\n        let finishValue = initValue + this.props.rowsPerPage;\n        items = items.slice(initValue, finishValue);\n        const itemList = items.map((item) => {\n            return <ItemRow key={item.id} item={item}/>;\n        });\n        return (<Container>{itemList}</Container>);\n    };\n\n    render() {\n        return (\n            <div className=\"list-container\">\n                <Container>\n                    <Row className=\"mt-5 mb-3\">\n                        <Col xs={12} sm={12}>\n                            <h1 className=\"display-4 font-weight-bold\">{this.props.title}</h1>\n                        </Col>\n                    </Row>\n                    <Row className=\"mb-2\">\n                        <Col xs={12} sm={12}>\n                            <Input className=\"searcher\"\n                                   placeholder=\"Write to filter\"\n                                   onChange={this.handleSearch(\"search\")}\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"mb-2\">\n                        <Col xs={12} sm={12}>\n                            {this.renderList(this.state.rowsFiltered)}\n                        </Col>\n                    </Row>\n                    <Row className=\"mb-2\">\n                        <Col xs={6} sm={6}>\n                            <Button color=\"primary\"\n                                    onClick={() => this.handleChangePage(\"previous\")}\n                                    disabled={!this.state.hasPreviousPage}\n                                    block>Previous</Button>\n                        </Col>\n                        <Col xs={6} sm={6}>\n                            <Button color=\"primary\"\n                                    onClick={() => this.handleChangePage(\"next\")}\n                                    disabled={!this.state.hasNextPage}\n                                    block>Next</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"mb-2\">\n                        <Col xs={12} sm={12}>\n                            {this.state.rowsFiltered.length} elements (Page {this.state.currentPage})\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    };\n};\n\nList.propTypes = {\n    data: PropTypes.array,                          // data => Array\n    minLengthSearch: PropTypes.number.isRequired,   // minLengthSearch => Number (required)\n    rowsPerPage: PropTypes.number.isRequired,       // rowsPerPage => Number (required)\n    title: PropTypes.string,                        // title => String\n};\n","import React from 'react';\nimport {GridLoader} from 'react-spinners';\nimport {css} from 'react-emotion';\n\n/**\n * LoadingPanel component.\n * Render a spinner and \"Loading\" message.\n */\nexport default class LoadingPanel extends React.Component {\n\n    render() {\n        const override = css`display: inline-block;`;\n\n        return (\n            <div className=\"container-fluid\" style={{height: \"100vh\", marginTop: \"20%\"}}>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <GridLoader sizeUnit={\"px\"}\n                                    size={50}\n                                    color={'#888C46'}\n                                    className={override}/>\n                    </div>\n                </div>\n                <div className=\"row align-items-center mt-5\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <h2 className=\"font-weight-bold\">Loading</h2>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\n/**\n * Error 500 component.\n */\nexport default class Error500 extends Component {\n    render() {\n        return (\n            <div className=\"container-fluid\" style={{height: \"100vh\", marginTop: \"25%\"}}>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <h1 className=\"display-4 text-danger font-weight-bold\">Ups, something is not working.</h1>\n                    </div>\n                </div>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <h3 className=\"font-weight-bold\">The error was reported to the team.</h3>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport List from './List';\nimport LoadingPanel from './LoadingPanel';\nimport Error500 from \"./Error500\";\nimport PropTypes from \"prop-types\";\n\n\n/**\n * LoadUserList component.\n * Get the data of the url passed and it renders the corresponding component:\n *  - While the data is loading: LoadingPanel component.\n *  - Error loading the datas: Error500 component.\n *  - Datas loaded: List component.\n */\nexport default class LoadUserList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            elements: [],\n        };\n        this.readData(this.props.dataURL);\n    }\n\n    /**\n     * Read the data of a file.json file and prepare the elements to show in the list.\n     */\n    readData = (dataURL) => {\n        fetch(dataURL)\n            .then(res => res.json())\n            .then((result) => {\n                    let elements = result.Brastlewark;\n                    this.setState({\n                        loaded: true,\n                        elements: elements,\n                    });\n                }\n            )\n            .catch((error) => {\n                this.setState({\n                    hasError: true,\n                });\n                // Register error in some log...\n            });\n    };\n\n    render() {\n\n        let component = <LoadingPanel/>;\n        if (this.state.hasError) {\n            component = <Error500/>;\n        } else if (this.state.loaded) {\n            component = <List data={this.state.elements}\n                              title={'Users in Brastlewark'}\n                              rowsPerPage={10}\n                              minLengthSearch={1}/>;\n        }\n\n        return (\n            <div>\n                <div>\n                    {component}\n                </div>\n            </div>\n        );\n    }\n}\n\nLoadUserList.propTypes = {\n    dataURL: PropTypes.string.isRequired,  // dataURL => String (required)\n};\n","import React, {Component} from 'react';\n\n/**\n * Error 404 component.\n */\nexport default class Error404 extends Component {\n    render() {\n        return (\n            <div className=\"container-fluid\" style={{height: \"100vh\", marginTop: \"25%\"}}>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <h1 className=\"display-2 text-danger font-weight-bold\">Error 404</h1>\n                    </div>\n                </div>\n                <div className=\"row align-items-center\">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <h3 className=\"font-weight-bold\">This url does not exist. :(</h3>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\n\n/**\n * UserCard component.\n * Render the thumbnail and username.\n */\nexport default class UserCard extends React.Component {\n    render() {\n        let user = this.props.userData;\n        return (\n            <div className=\"card m-3 shadow p-3 bg-white rounded\">\n                <img className=\"card-img-top\" src={user.thumbnail} alt=\"User\"/>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{user.name}</h5>\n                </div>\n            </div>\n        );\n    }\n}\n\nUserCard.propTypes = {\n    userData: PropTypes.shape({         // userData => Dictionary of...\n        thumbnail: PropTypes.string,    // thumbnail => String\n        name: PropTypes.string,         // name => String\n    })\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * ItemList component.\n * Render a list of the values with a main title.\n */\nexport default class ItemList extends React.Component {\n\n    render() {\n        /** List of values. If the list is empty, the empty message is shown. */\n        const itemList = this.props.list <= 0 ?\n            <div>{this.props.emptyMessage}</div> : this.props.list.map((item, index) =>\n                <li key={index} className=\"list-group-item text-truncate\">{item}</li>);\n\n        return (\n            <div className=\"friend-list-container m-3 shadow p-3 bg-white rounded\">\n                <h4 className=\"font-weight-bold text-truncate\">\n                    {this.props.title}\n                </h4>\n                <ul className=\"list-group mt-3\">\n                    {itemList}\n                </ul>\n            </div>\n        );\n    };\n};\n\nItemList.propTypes = {\n    emptyMessage: PropTypes.string,     // emptyMessage => String\n    list: PropTypes.array,              // list => Array\n    title: PropTypes.string,            // title => Number (required)\n};\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\n/**\n * UserInfo component.\n * Render the information of the user.\n */\nexport default class UserInfo extends React.Component {\n\n    render() {\n        return (\n            <div className=\"user-info-container m-3 shadow p-3 bg-white rounded\">\n                <h4 className=\"font-weight-bold\">User information</h4>\n                <div className=\"row mt-3\">\n                    <div className=\"col-6 text-sm-center\">\n                        <span className=\"font-weight-bold\">Age:</span> {this.props.age}\n                    </div>\n                    <div className=\"col-6 text-sm-center\">\n                        <span className=\"font-weight-bold\">Hair color:</span> {this.props.hairColor}\n                    </div>\n                </div>\n                <div className=\"row mt-2 md\">\n                    <div className=\"col-6 text-sm-center\">\n                        <span className=\"font-weight-bold\">Height:</span> {this.props.height}\n                    </div>\n                    <div className=\"col-6 text-sm-center\">\n                        <span className=\"font-weight-bold\">Weight:</span> {this.props.weight}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUserInfo.propTypes = {\n    age: PropTypes.number,          // age => String\n    hairColor: PropTypes.string,    // hairColor => String\n    height: PropTypes.number,       // height => Number\n    weight: PropTypes.number,       // wight => Number\n};\n\n","import React from 'react';\nimport UserCard from './UserCard';\nimport ItemList from './ItemList';\nimport UserInfo from './UserInfo';\nimport {Link} from 'react-router-dom'\nimport PropTypes from \"prop-types\";\n\n/**\n * UserPanel component.\n * Render a panel that contains the different components to display the\n * user's information.\n */\nexport default class UserPanel extends React.Component {\n    render() {\n        const userData = this.props.userData;\n        return (<div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-sm-4 col-lg-4\">\n                    <UserCard userData={userData}/>\n                    <Link to=\"/\">\n                        <button type=\"button\" className=\"btn btn-primary w-75\">Go to the list!</button>\n                    </Link>\n                </div>\n                <div className=\"col-sm-7 mt-4\">\n                    <div className=\"col-sm-12\">\n                        <UserInfo hairColor={userData.hair_color}\n                                  height={userData.height}\n                                  weight={userData.weight}\n                                  age={userData.age}/>\n                    </div>\n                    <div className=\"col-sm-12\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-6\">\n                                <ItemList list={userData.friends}\n                                          title={\"Friends\"}\n                                          emptyMessage={\"This user not have friends yet.\"}/></div>\n                            <div className=\"col-sm-6\">\n                                <ItemList list={userData.professions}\n                                          title={\"Professions\"}\n                                          emptyMessage={\"This user not have professions yet.\"}/></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>)\n    };\n};\n\nUserPanel.propTypes = {\n    userData: PropTypes.shape({         // userData => Dictionary of ...\n        hair_color: PropTypes.string,   // hair_color => String\n        friends: PropTypes.array,       // friends => Array\n        professions: PropTypes.array,   // professions => Array\n    })\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UserPanel from './UserPanel';\nimport LoadingPanel from './LoadingPanel';\nimport Error500 from './Error500';\n\n/**\n * LoadUserInfo component.\n * Get the data of the url passed and it renders the corresponding component:\n *  - While the data is loading: LoadingPanel component.\n *  - Error loading the datas: Error500 component.\n *  - Datas loaded: UserPanel component.\n */\nexport default class LoadUserInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            userData: null,\n            hasError: false,\n        };\n        this.readData(this.props.dataURL);\n    };\n\n    /**\n     * Read the data of a file.json file and prepare the elements to show in the list.\n     */\n    readData = (dataURL) => {\n        fetch(dataURL)\n            .then(res => res.json())\n            .then((result) => {\n                    let userData = result.Brastlewark[this.props.id];\n                    this.setState({\n                        loaded: true,\n                        userData: userData,\n                    });\n                }\n            )\n            .catch((error) => {\n                this.setState({\n                    hasError: true,\n                });\n                // Register error in some log...\n            });\n    };\n\n    render() {\n        let component = <LoadingPanel/>;\n        if (this.state.hasError) {\n            component = <Error500/>;\n        } else if (this.state.loaded) {\n            component = <UserPanel userData={this.state.userData}/>;\n        }\n\n        return (\n            <div>\n                <div>\n                    {component}\n                </div>\n            </div>\n        );\n    }\n}\n\nLoadUserInfo.propTypes = {\n    dataURL: PropTypes.string.isRequired,   // dataURL => String (required)\n    id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n    ]).isRequired,                          // id => Number or String (required)\n};\n","import React, {Component} from 'react';\nimport './App.css';\nimport LoadUserList from './components/LoadUserList';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Error404 from './components/Error404';\nimport LoadUserInfo from \"./components/LoadUserInfo\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataURL: 'https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json',\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router>\n                    <div>\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <LoadUserList dataURL={this.state.dataURL}/>}/>\n                            <Route exact path=\"/user/:id\" render={({match}) => <LoadUserInfo id={match.params.id}\n                                                                                             dataURL={this.state.dataURL}/>}/>\n                            <Route component={Error404}/>\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}